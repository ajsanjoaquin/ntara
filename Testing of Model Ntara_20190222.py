
# coding: utf-8

# In[2]:


import scobra


# In[3]:


import pandas


# In[4]:


from scobra.cyc import BuildModel


# In[12]:


##Read in the Model to be tested

ntara = scobra.Model('C:/Users/Wayne/Ntara_20190222.xlsx')



# In[13]:


ntara


# In[6]:


## This function sorts all the reactions inside the model's CSV according to its Compartments. Returns a dictionary consisting 
## of the Compartment name as the key and the reactions within this Compartment as its value
def Sort_Reaction_Cpm_Dictionary(modelcsvpathname, endsuffixlist):
    csv = pandas.read_excel(modelcsvpathname, sheet_name = 'Reaction List', sep = '\t')
    dictionary = {}
    for endsuffix in endsuffixlist:
       print "End Suffix = " + str(endsuffix)`
       reactionlist = []
       for entry in csv['Abbreviation']:
          print "Entry = " + str(entry)
          compartment = str(entry)[-len(endsuffix) :]
          print 'Compartment = '  + str(compartment)
          if compartment == endsuffix:
             print "Equivalent"
             reactionlist.append(str(entry))
       dictionary[endsuffix] = reactionlist
    return dictionary


# In[7]:


## This function takes in the dictionary containing Compartment names as keys and the reactions as values, with the dictionary
## being the one generated by SortReactionCpmDictionary; the model itself; and the name of the model as a string.

## The function returns a dictionary consisting of the key "Optimal", i.e. the list of reactions that have a solution, 
## and the key "No solution", i.e. the list of reactions with no solution. The function also returns an excel file that has 
## the name modelname. 

def Test_Model(dictionary, model, modelname):
    TXdictionary = {}
    for tx_rxn in dictionary['_tx']:
        TXdictionary[tx_rxn] = (0,0) ## sets the constraint for all TX reactions to be 0
    model.SetConstraints(TXdictionary)
    BiomassDictionary = {}
    for biomass in dictionary['_biomass']:
        BiomassDictionary[biomass] = (0,0) 
    model.SetConstraints(BiomassDictionary) ## sets the constraint for all Biomass reactions to be 0
    ## Sets the constraints for the TX reactions GLC_tx, CO2_tx, O2_tx, H2O_tx, H_tx, NO3_tx, SO4_tx
    model.SetConstraints({'GLC_tx':(0, 1000), 'CO2_tx': (-1000, 1000), 'H_tx': (-1000,1000),'O2_tx': (-1000,1000), 'H2O_tx':(-1000,1000), 'NO3_tx': (-1000,1000), 'SO4_tx': (-1000, 1000)})
    ## Set the objective of the reaction to minimize GLC_tx
    model.SetObjective('GLC_tx')
    model.SetObjDirec('Min')
    optimallist = []
    name = modelname + ' Solution Fluxes'+ '.xlsx'
    print name
    writer = pandas.ExcelWriter(name)
    ## Sets the constraint for each biomass to be -1, and tests whether the production of said biomass is possible. 
    ## If biomass production is possible, it will be added into the dictionary for the key 'optimal'. Also,
    ## its solution fluxes will be present in the excel sheet generated. Otherwise, it will be added into the dictionary for the
    ## key 'No solution'
    for biomass in dictionary['_biomass']:
       model.SetConstraint(biomass, -1, -1)
       print "Biomass = " +str(biomass)
       print "Important Constraints of the model at the current iteration of the loop are as follows: "
       print model.GetConstraints([biomass, 'GLC_tx','CO2_tx', 'O2_tx', 'H_tx','H2O_tx', 'NO3_tx', 'SO4_tx'])
       model.Solve()
       model.GetStatusMsg()
       if model.GetStatusMsg() == 'optimal':
          optimallist.append(biomass)
       if model.solution != None:
          Sol = model.solution.fluxes
          df = Sol.to_frame()
          df.to_excel(writer, biomass)
       model.SetConstraint(biomass, 0, 0)
    writer.save()
    biomass_dictionary = {}
    biomass_dictionary['Optimal'] = optimallist 
    nonoptimallist = []
    for reac in dictionary['_biomass']:
        if reac not in optimallist:
            nonoptimallist.append(reac)
    biomass_dictionary['No solution'] = nonoptimallist
    print optimallist ## Prints out the biomasses which are able to be produced.
    return biomass_dictionary


# In[8]:


## This function takes in the dictionary containing Compartment names as keys and the reactions as values, with the dictionary
## being the one generated by SortReactionCpmDictionary; the model itself; and the name of the model as a string.

## The function prints whether it is possible for the model to generate ATPase, and also generates an excel sheet which will
## contain the solution fluxes if the model can generate ATPase. Otherwise, the excel sheet will be a blank sheet.
def Test_Model_ATPase(dictionary, model, modelname):
    TXdictionary = {}
    for tx_rxn in dictionary['_tx']:
        TXdictionary[tx_rxn] = (0,0)
    model.SetConstraints(TXdictionary)
    BiomassDictionary = {}
    for biomass in dictionary['_biomass']:
        BiomassDictionary[biomass] = (0,0)
    model.SetConstraints(BiomassDictionary)
    model.SetObjective('ATPase_tx')
    model.SetObjDirec('Min')
    model.SetConstraints({'ATPase_tx':(-1000,0),'GLC_tx':(1,1),'CO2_tx': (-1000, 1000), 'O2_tx': (-1000,1000), 'H_tx': (-1000,1000), 'H2O_tx':(-1000,1000)})#'PYRUVATE_tx': (-1000,1000),
    print model.GetConstraints(['ATPase_tx','GLC_tx','CO2_tx', 'O2_tx', 'H2O_tx', 'H_tx'])#Pyruvate_tx 
    #print model.GetState()
    name = modelname + ' Solution Fluxes'+ '.xlsx'
    print name
    writer = pandas.ExcelWriter(name)
    model.Solve()
    model.GetStatusMsg()
    if model.solution != None:
        Sol = model.solution.fluxes
        df = Sol.to_frame()
        df.to_excel(writer, 'ATPase_tx')
    writer.save()


# In[14]:


transporters_Ntara = Sort_Reaction_Cpm_Dictionary('C:/Users/Wayne/Ntara_20190222.xlsx', ['_tx', '_mc', '_pc','_vc','_xc', '_biomass'])


# In[17]:


Test_Model_ATPase(transporters_Ntara, ntara, 'Ntara 22 Feb ATPase')


# In[18]:


Test_Model(transporters_Ntara, ntara, "Ntara 22 Feb")

